import numpy as np

np.random.seed(123)  # for reproducibility
np.set_printoptions(threshold='nan')
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras.utils import np_utils
from scipy import misc
import os
from keras import backend as K
K.set_image_dim_ordering('th')

#TODO: Read names of matrices to an array with os.listdir
# A vector of filenames.
matrices = os.listdir("image_400")
#print len(matrices)
matrices.remove(".DS_Store")
type = open("min_type.txt", 'r')
types = []
count = 0
for line in type:
    type_data = line.rstrip().split(' ')
    if matrices[count] == type_data[0]+".png":
        types.append(type_data[1])
        count += 1
#TODO: Read values of spmv from min_type to an array
# `labels[i]` is the label for the image in `filenames[i].

images = []
image_size = 400
for im in matrices:
    image = misc.imread("image_400/" + im)
    images.append(image)

images_shuffled = []
types_shuffled = []

"""
#randomizing the list indexes in every run
shuffleList = list(range(len(images)))
random.shuffle(shuffleList)
print shuffleList
"""

"""
Using pre-generated random lists with a fixed size for the large dataset (1878 for CSR/COO and 1077 for ELL)
"""

shuffleList = [502, 250, 813, 1168, 121, 215, 264, 1047, 1179, 1197, 1115, 373, 619, 391, 419, 710, 980, 219, 210, 821, 571, 1117, 347, 796, 559, 1311, 1246, 497, 1181, 1169, 826, 441, 230, 152, 142, 794, 1058, 1226, 1310, 355, 642, 961, 126, 529, 701, 359, 707, 394, 495, 1319, 786, 450, 110, 392, 62, 673, 664, 329, 645, 243, 509, 4, 563, 426, 683, 1033, 688, 254, 1025, 954, 251, 704, 911, 864, 1164, 470, 830, 1215, 894, 330, 229, 772, 155, 438, 499, 1157, 349, 47, 1248, 569, 43, 1371, 693, 476, 168, 883, 1260, 836, 651, 855, 1004, 504, 1313, 1345, 239, 1323, 1348, 798, 189, 1278, 232, 984, 835, 375, 1124, 655, 565, 635, 1341, 1073, 301, 1298, 455, 862, 192, 742, 858, 628, 592, 1167, 323, 205, 825, 360, 720, 885, 1219, 89, 367, 411, 879, 1362, 162, 613, 1376, 346, 1180, 1039, 1028, 815, 397, 335, 730, 1029, 800, 195, 1213, 17, 533, 678, 1118, 841, 352, 382, 755, 857, 727, 1042, 1373, 489, 824, 993, 365, 122, 67, 576, 271, 1211, 381, 957, 1207, 594, 988, 596, 1353, 582, 27, 716, 458, 1282, 374, 1304, 1045, 267, 652, 1364, 30, 905, 917, 432, 546, 1233, 1295, 771, 1292, 1008, 153, 877, 1377, 111, 388, 558, 942, 784, 101, 1194, 491, 464, 805, 940, 1185, 259, 511, 570, 1099, 765, 666, 1274, 1273, 795, 617, 273, 274, 1290, 487, 1139, 918, 336, 106, 915, 87, 736, 1046, 314, 1050, 1175, 881, 317, 659, 1141, 518, 1014, 578, 564, 71, 293, 972, 5, 1133, 928, 684, 175, 1220, 443, 1318, 402, 1109, 1090, 1145, 1096, 1380, 876, 156, 1236, 238, 739, 1214, 510, 829, 900, 650, 237, 538, 1379, 1193, 1346, 713, 747, 1299, 279, 1244, 473, 870, 828, 887, 1092, 37, 537, 816, 902, 263, 164, 1129, 29, 1280, 1072, 1134, 1359, 726, 1051, 524, 332, 377, 245, 975, 667, 767, 84, 1250, 531, 804, 125, 96, 316, 1234, 1242, 7, 780, 315, 350, 1258, 416, 979, 555, 280, 203, 202, 93, 1240, 1143, 653, 1177, 1069, 921, 811, 1349, 108, 919, 1227, 695, 452, 757, 1127, 127, 325, 88, 880, 990, 448, 1054, 1206, 261, 935, 534, 686, 603, 1241, 929, 1087, 1324, 277, 611, 751, 1112, 171, 1288, 948, 721, 788, 782, 1340, 9, 1243, 217, 154, 1158, 700, 6, 600, 246, 1262, 98, 208, 1130, 982, 1126, 694, 42, 240, 966, 26, 1156, 399, 135, 326, 300, 553, 639, 890, 389, 1309, 1009, 234, 985, 754, 840, 1257, 640, 1247, 461, 1317, 430, 615, 692, 1065, 437, 712, 743, 253, 63, 1327, 854, 618, 91, 1113, 925, 838, 669, 781, 1315, 528, 1357, 1085, 1314, 1342, 810, 977, 852, 690, 321, 1104, 809, 181, 660, 463, 138, 814, 1159, 1347, 750, 213, 859, 1333, 161, 952, 851, 282, 1239, 1291, 291, 474, 549, 698, 761, 801, 1162, 200, 78, 405, 308, 209, 955, 703, 24, 1252, 103, 206, 1138, 715, 53, 506, 176, 417, 1281, 532, 609, 413, 1079, 872, 86, 646, 1071, 380, 41, 179, 482, 1335, 943, 193, 1148, 1203, 554, 21, 779, 299, 1184, 133, 378, 396, 1091, 923, 1343, 390, 831, 165, 685, 447, 766, 863, 1161, 556, 262, 916, 1300, 899, 235, 1374, 1237, 221, 1116, 850, 1363, 141, 962, 298, 146, 1084, 105, 1235, 1082, 514, 1301, 1268, 1302, 1332, 343, 873, 118, 2, 1283, 440, 1378, 607, 896, 310, 1048, 1107, 845, 1255, 1320, 140, 1325, 198, 791, 770, 134, 1195, 641, 348, 799, 1356, 938, 763, 410, 1001, 936, 1163, 723, 987, 1044, 191, 99, 185, 136, 602, 792, 222, 104, 522, 207, 1149, 610, 72, 1366, 933, 552, 311, 1330, 256, 11, 486, 944, 842, 435, 233, 1040, 1350, 320, 306, 744, 752, 393, 90, 14, 74, 868, 401, 1339, 351, 1132, 1178, 945, 1011, 369, 1016, 322, 871, 1221, 333, 860, 1305, 54, 456, 94, 436, 724, 1263, 431, 266, 748, 307, 671, 201, 783, 930, 1351, 1218, 875, 561, 959, 861, 759, 1120, 1173, 1253, 8, 1321, 1, 906, 1020, 1021, 469, 1338, 733, 562, 16, 188, 1135, 931, 1312, 668, 214, 907, 446, 964, 1137, 869, 319, 178, 1103, 574, 1336, 466, 1081, 934, 370, 1264, 912, 172, 475, 445, 1160, 1147, 521, 223, 676, 132, 115, 658, 269, 1012, 38, 494, 197, 892, 793, 544, 1183, 994, 593, 288, 670, 139, 1190, 228, 1013, 248, 1270, 1228, 102, 519, 1187, 1146, 626, 581, 760, 292, 356, 204, 1297, 749, 753, 362, 903, 777, 728, 973, 361, 545, 995, 114, 218, 1055, 462, 1007, 1238, 387, 492, 1209, 160, 818, 820, 211, 586, 909, 1140, 260, 212, 947, 579, 285, 353, 1375, 588, 997, 167, 244, 614, 498, 1232, 732, 92, 169, 425, 383, 536, 44, 647, 706, 970, 503, 186, 827, 1064, 1294, 479, 568, 459, 541, 697, 644, 530, 48, 61, 287, 756, 1095, 725, 1128, 807, 236, 364, 708, 379, 1068, 989, 20, 1269, 1354, 358, 516, 731, 403, 75, 687, 878, 158, 339, 924, 1122, 806, 998, 1102, 1369, 1155, 817, 679, 1271, 978, 634, 1074, 967, 49, 884, 305, 512, 1136, 849, 1365, 1078, 112, 190, 856, 270, 1251, 1275, 1036, 689, 867, 525, 1358, 889, 837, 407, 587, 787, 1287, 746, 575, 199, 1284, 145, 1224, 901, 888, 151, 775, 601, 1231, 675, 1352, 1061, 1111, 77, 144, 1196, 621, 1165, 45, 1043, 745, 633, 35, 1097, 1067, 83, 442, 949, 1066, 1217, 822, 303, 182, 1308, 177, 1026, 1049, 1216, 57, 1119, 908, 682, 1303, 18, 196, 663, 414, 1056, 583, 46, 302, 15, 490, 467, 113, 1017, 846, 776, 680, 1208, 557, 963, 496, 231, 1100, 1344, 22, 174, 1188, 1191, 620, 1230, 501, 508, 637, 408, 1037, 226, 309, 895, 649, 1080, 82, 612, 657, 762, 956, 580, 1123, 927, 769, 951, 922, 630, 1098, 184, 808, 722, 848, 252, 85, 1086, 960, 548, 632, 344, 1272, 275, 839, 1089, 1153, 428, 157, 1199, 1223, 406, 295, 1106, 1307, 1022, 674, 150, 241, 958, 483, 19, 662, 289, 1052, 560, 953, 33, 340, 661, 1225, 971, 421, 834, 148, 681, 1000, 163, 296, 812, 1277, 312, 1031, 166, 433, 543, 400, 937, 740, 1200, 672, 28, 968, 897, 265, 73, 539, 1171, 797, 500, 874, 354, 56, 737, 68, 1204, 1114, 910, 702, 717, 481, 337, 451, 598, 584, 992, 719, 1296, 268, 117, 0, 624, 604, 216, 616, 636, 12, 1027, 81, 1125, 281, 1367, 363, 1316, 477, 1372, 605, 550, 471, 1176, 1105, 1334, 627, 1041, 1070, 1010, 180, 939, 76, 109, 328, 738, 705, 976, 1198, 1131, 1053, 1381, 247, 485, 25, 457, 129, 623, 130, 1245, 1355, 1329, 468, 507, 677, 170, 1202, 173, 128, 802, 526, 1259, 711, 1328, 34, 97, 741, 1062, 714, 493, 376, 996, 478, 95, 398, 480, 331, 629, 227, 278, 844, 778, 764, 599, 1034, 149, 505, 422, 1144, 1279, 1101, 409, 1286, 1077, 965, 904, 79, 1032, 1151, 865, 1154, 699, 643, 513, 1063, 1254, 368, 648, 313, 729, 1337, 1035, 32, 338, 341, 1150, 819, 527, 276, 1360, 423, 1152, 1192, 665, 272, 427, 1166, 220, 1110, 159, 1030, 515, 520, 1003, 183, 1276, 853, 1201, 10, 1229, 893, 31, 625, 1108, 595, 50, 371, 913, 472, 1083, 453, 696, 654, 656, 40, 803, 950, 1019, 785, 1370, 1174, 986, 981, 420, 638, 847, 1121, 523, 1222, 385, 69, 434, 284, 66, 1076, 283, 224, 608, 39, 258, 551, 566, 547, 999, 1289, 1285, 1186, 833, 983, 517, 64, 294, 1267, 60, 832, 886, 116, 1306, 324, 334, 591, 80, 342, 914, 120, 577, 124, 429, 286, 304, 540, 535, 439, 866, 225, 100, 36, 768, 1018, 1172, 147, 542, 1059, 758, 1038, 119, 1060, 789, 143, 926, 1093, 412, 137, 488, 941, 366, 898, 1189, 1075, 932, 631, 1322, 55, 194, 691, 573, 52, 572, 585, 444, 290, 1326, 790, 774, 734, 823, 386, 1023, 1266, 1249, 65, 187, 424, 249, 969, 484, 384, 843, 991, 107, 460, 242, 622, 3, 773, 1015, 345, 718, 255, 372, 882, 418, 974, 1331, 1005, 891, 1293, 13, 567, 1361, 297, 1057, 1142, 1170, 1094, 1205, 1006, 1002, 51, 395, 590, 1256, 257, 1261, 23, 465, 709, 123, 70, 1212, 1210, 1265, 1182, 1088, 318, 449, 1368, 735, 589, 404, 946, 357, 454, 920, 597, 327, 1024, 131, 59, 415, 606, 58]

for i in range(len(images)):
    images_shuffled.append(images[shuffleList[i]])
    types_shuffled.append(types[shuffleList[i]])

(X_train, y_train) = (images_shuffled[:-180], types_shuffled[:-180])
(X_test, y_test) = (images_shuffled[-180:], types_shuffled[-180:])

X_train = np.array(X_train)
X_test = np.array(X_test)

# 5. Preprocess input data
X_train = X_train.reshape(X_train.shape[0], 3, image_size, image_size)
X_test = X_test.reshape(X_test.shape[0], 3, image_size, image_size)

# 6. Preprocess class labels
Y_train = np_utils.to_categorical(y_train, 3)
Y_test = np_utils.to_categorical(y_test, 3)

# 7. Define model architecture
model = Sequential()

model.add(Conv2D(20, (5, 5), activation='relu', input_shape=(3, image_size, image_size)))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(50, (5, 5), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dense(3, activation='softmax'))

# 8. Compile model
model.compile(loss='categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

# 9. Fit model on training data
model.fit(X_train, Y_train,
          batch_size=32, epochs=10, verbose=1)

# 10. Evaluate model on test data
score = model.evaluate(X_test, Y_test, verbose=0)
print "result on test set:" + str(score)

